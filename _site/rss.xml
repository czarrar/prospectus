<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Jekyll Bootstrap</title>
        <description>Jekyll Bootstrap - Name Lastname</description>
        <link>http://czarrar.github.io/prospectus</link>
        <link>http://czarrar.github.io/prospectus</link>
        <lastBuildDate>2013-10-06T13:33:47-04:00</lastBuildDate>
        <pubDate>2013-10-06T13:33:47-04:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Morning evening variation in human brain metabolism and memory circuits</title>
                <description>&lt;p&gt;I was very interested in reading this paper because it took an unstudied phenomena, systematic changes in resting-state connectivity over the course of the day, and put it in the context of a larger theoretical framework related to synaptic homeostasis. The synaptic homeostasis hypothesis suggests that &lt;em&gt;&amp;#8220;a major function of sleep is the regulation of synaptic weights: over the course of a day, learning and experience cause an increase in the brain’s synaptic density, which is pruned each night during sleep (Gilestro et al. 2009; Tononi and Cirelli 2003)&amp;#8221;&lt;/em&gt;. From this theory, the author&amp;#8217;s &lt;em&gt;&amp;#8220;hypothesized that wake would alter the resting-state functional organization of the brain and increase its metabolic cost&amp;#8221;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They found that functional connectivity differences were fairly stable between morning and evening. The most prominent differences were related to regions in the MTL, which were locally connected in the morning and then displayed more connectivity with the prefrontal, parietal, striatal, and brainstem. Surprisingly, there was no associated metabolic changes from PET scans between morning and evening in a separate and smaller set of participants.&lt;/p&gt;

&lt;h1 id='highlights_and_thoughts'&gt;Highlights and Thoughts&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Authors suggest that greater interference effect for scans conducted in the evening versus morning to explain results.&lt;/li&gt;

&lt;li&gt;Greater degree of memory replay may occur during the evening (high degree of overlap between memory retrieval meta-analysis and evening minus morning connectivity)&lt;/li&gt;

&lt;li&gt;Greater degree of replay or retrieval might also lead to greater amounts of interference between multiple memories that needs to be resolved by the evening.&lt;/li&gt;

&lt;li&gt;Interesting that striatal connectivity goes from negative to positive by the evening. Is this possibly a greater reflection of greater memory integration going in the evening?&lt;/li&gt;

&lt;li&gt;Weird that metabolism the same morning vs evening. Authors suggest that metabolism changes due to learning/memory might be time-limited possibly due to local sleep during wake states. It would be interesting if such local sleep periods were more prevalent during rest periods, which might explain improvements in memory performance after an intervening rest vs task period.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wonder if one could also quickly examine the same time of day (morning/evening) effects with currently available samples of resting-state data. Between-subjects one could compare differences in MTL functional connectivity depending on the time of day (earlier versus later) of the scan.&lt;/p&gt;

&lt;p&gt;This is what would interest me the most if it were true:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;One exciting, though speculative, possibility is that the evening MTL functional connectivity arises as subjects accumulate experiences and memories throughout the day and recedes as those memories are consolidated during sleep.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I already commented on the metabolism earlier but this quote from the paper might be relevant as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;Madsen et al. (1995), they were able to show that aerobic glycolysis persists for close to an hour following the performance of a difficult cognitive task without any evidence of an increase in oxygen consumption or blood flow. This observation, coupled with the metabolic measurements we report herein (i.e., no change in aerobic glycolysis either globally or regionally between morning and evening), suggests that some of the metabolic consequences of synaptic growth and strengthening may be time limited within the period of wake. Obviously, more work needs to be done that emphasizes a more comprehensive view of glucose metabolism. The idea of “local sleep” during wake (Vyazovskiy et al. 2011) should also be considered.&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id='experiments'&gt;Experiments&lt;/h1&gt;

&lt;p&gt;There were two experiments.&lt;/p&gt;

&lt;p&gt;First, they conducted a resting-state fMRI study during the morning and evening (within-subject design). Scans were counter-balanced. Some participants completed the morning scan first and evening scan second, and vice-versa.&lt;/p&gt;

&lt;p&gt;Second, they conducted a PET scan on a smaller sample with the same morning and evening design. I am not clear if the same counter-balancing occurred with PET.&lt;/p&gt;

&lt;h1 id='special_analysis'&gt;Special Analysis&lt;/h1&gt;

&lt;p&gt;Special algorithm called IDEA, which given a set of ROIs will find significant univariate associations with an experimental or phenotypic variable and then take the peaks from those results and use those as ROIs, and iterating this process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;The algorithm is initialized by placing a number of regions into the testing set. Here, we used 36 “canonical” regions representing well-defined nodes in prominent brain networks, including the default-mode, dorsal-attention, executive-control, salience, visual, auditory, and motor networks (Raichle 2011).&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;The predictive ability of IDEA was tested using a leave-one-out cross-validation scheme. IDEA was run using data from 23 of the 24 subjects. Using the regions identified by IDEA, we generated a predictive model relating functional connectivity measurements to morning/evening status. We input data from the left-out subject into the model and evaluated its accuracy.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id='results'&gt;Results&lt;/h1&gt;

&lt;h2 id='functional_connectivity'&gt;Functional Connectivity&lt;/h2&gt;

&lt;p&gt;Using their original set of 31 ROIs, didn&amp;#8217;t find any large differences between conditions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;Our analysis identified two regions with strongly altered RS-fcMRI in the left and right medial temporal lobe&amp;#8221;&lt;/em&gt; within entorhinal cortex.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;In the morning, the regions in left and right MTL were primarily connected locally with correlations in contralateral MTL, the surrounding area, and the temporal poles, as well as negative correlations in the striatum bilaterally (Fig. 4).&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;In the evening, the regions of the left and right MTL displayed functional connectivity with neocortical areas, including the retrosplenial cortex, and nearby posterior cingulate and precuneus, bilateral angular and supramarginal gyri, and dorsolateral and dorsomedial prefrontal cortex. The MTL also exhibited in the evening positive correlations with the pontine tegmentum and with bilateral basal ganglia, as well as negative correlations bilaterally with the anterior insula. The negative correlations with the striatum became positive correlations in the evening.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They note that many correlations that develop in evening are related to memory retrieval and have a retrieval meta-analysis that is highly similar as a comparison.&lt;/p&gt;

&lt;h2 id='pet'&gt;PET&lt;/h2&gt;

&lt;p&gt;They looked at glucose, oxygen, and cerebral blood flow. Across these and other measures, there were no significant differences between morning and evening.&lt;/p&gt;

&lt;h1 id='relevant_references'&gt;Relevant References&lt;/h1&gt;

&lt;p&gt;There was an important citation related to local sleep (see below) that I found and explored it&amp;#8217;s related citations.&lt;/p&gt;

&lt;p&gt;Vyazovskiy VV, Olcese U, Hanlon EC, Nir Y, Cirelli C, Tononi G. Local sleep in awake rats. Nature 472: 443–447, 2011.&lt;/p&gt;

&lt;p&gt;Park B, Kim JI, Lee D, Jeong SO, Lee JD, Park HJ. Are brain networks stable during a 24-hour period? Neuroimage 59: 456–466, 2012.&lt;/p&gt;</description>
                <link>http://czarrar.github.io/prospectus/sleep/2013/10/03/morning-evening-variation-in-human-brain-metabolism-and-memory-circuits</link>
                <guid>http://czarrar.github.io/prospectus/sleep/2013/10/03/morning-evening-variation-in-human-brain-metabolism-and-memory-circuits</guid>
                <pubDate>2013-10-03T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Readability</title>
                <description>&lt;p&gt;Today, I worked through finishing a script that would allow me to take a local html journal article, transform it to text via readability, and then send it to my kindle. I started on this script a few days back and had hoped to be done today but there seem to be some final touches left. Here, I&amp;#8217;ll detail the specific steps involved and any trouble that I faced.&lt;/p&gt;

&lt;p&gt;Why am I taking all these steps? First, I really enjoy reading off the kindle and believe it increases my productivity. I find it at least doubles my reading speed and it is easier to use then an iPad or easier to look at then an iPhone especially when traveling (e.g., on the train or subway). Second, I can&amp;#8217;t use many send to kindle options for scientific articles. Most articles require a login or institutional access and options such as readability or instapaper try to scrape these pages from their servers, which won&amp;#8217;t have access. Consequently, I&amp;#8217;m taking a round-a-bout approach here by getting the text from the article via my access, then posting it online, and saving it to the kindle from there with readability (although other options like instapaper or pocket should work just as well).&lt;/p&gt;

&lt;h1 id='saving_journal_article'&gt;Saving Journal Article&lt;/h1&gt;

&lt;p&gt;Assuming I have access to the article (e.g., via Yale vpn access), then I save the article from the browser using a single-click Zotero plugin. This imports the citation, pdf, and snapshot (full html page) of the specified paper. In order to get the full page snapshot, I need to make sure to always be on the full text page and not just the abstract page. I can note the location of the snapshot by right-clicking it in Zotero and finding it in the Finder.&lt;/p&gt;

&lt;h1 id='uploading_html_journal_article_to_web_server'&gt;Uploading HTML Journal Article to Web Server&lt;/h1&gt;

&lt;p&gt;This is a simple &lt;code&gt;scp&lt;/code&gt; command. I am using a web server to temporarily copy the html page of the journal article to the web. I use an ssh key allowing me to skip entering a password every time.&lt;/p&gt;

&lt;h2 id='problems'&gt;Problems&lt;/h2&gt;

&lt;p&gt;The only issue I faced was that one needs &lt;code&gt;sudo&lt;/code&gt; access to copy files to the public web folder. As a workaround, I soft-linked from an external folder to which I would have user access.&lt;/p&gt;

&lt;h1 id='sending_the_html_to_readability'&gt;Sending the HTML to Readability&lt;/h1&gt;

&lt;p&gt;Here I made a simple script (you can view it as a &lt;a href='https://gist.github.com/czarrar/6805001'&gt;github gist&lt;/a&gt;) that makes use of readit to add a bookmark on readability for the desired web page. In this case, the web page is the recently uploaded page. This script returns the article id of the newly bookmarked page.&lt;/p&gt;

&lt;h2 id='problems'&gt;Problems&lt;/h2&gt;

&lt;p&gt;The first problem I faced was how I could login to readability. Two types of tokens are needed when using readit: consumer tokens and user tokens. The consumer tokens are easily accessible off of the readability site. The user tokens, however, appear to require actually logging into the site. I figured out how to do this by using oauth and the x_auth method of giving my username and password along with the consumer tokens. This then gives me access to the consumer tokens. This knowledge came from a github gist that should be cited here when I remember it.&lt;/p&gt;

&lt;p&gt;I also recently encountered a problem where if I add a bookmark and then update the original page, I can&amp;#8217;t seem to then update the bookmark. The content of the bookmark will be of the original page and not the new page. Deleting the bookmark doesn&amp;#8217;t seem to help here either. So TBD.&lt;/p&gt;

&lt;h1 id='sending_readability_bookmark_to_kindle'&gt;Sending Readability Bookmark to Kindle&lt;/h1&gt;

&lt;p&gt;Here I made another simple script that makes use of mechanize and nokogiri to manually access the readability site and send a specific bookmarked article to kindle. This script can also be viewed as a &lt;a href='https://gist.github.com/czarrar/6805097'&gt;github gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='problems'&gt;Problems&lt;/h2&gt;

&lt;p&gt;I had tried to send to kindle with the more convenient readit library. However, for some reason I got some error any time I tried to access the kindle api page, which seems to be labeled as legacy mode. I then found another repository that took this more manual approach to interact with readability.&lt;/p&gt;</description>
                <link>http://czarrar.github.io/prospectus/code/2013/10/02/readability</link>
                <guid>http://czarrar.github.io/prospectus/code/2013/10/02/readability</guid>
                <pubDate>2013-10-02T00:00:00-04:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</description>
                <link>http://czarrar.github.io/prospectus/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://czarrar.github.io/prospectus/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-05:00</pubDate>
        </item>


</channel>
</rss>
